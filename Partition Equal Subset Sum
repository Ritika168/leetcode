class Solution {
public:
    bool subsetSumToK(int n, int k, vector<int> &arr) {
        vector<bool> prev(k + 1, false), curr(k + 1, false);
        prev[0] = curr[0] = true;  // Base case: sum 0 is always possible

        if (arr[0] <= k)
            prev[arr[0]] = true;

        for (int i = 1; i < n; i++) {
            for (int target = 1; target <= k; target++) {
                bool notTake = prev[target];
                bool take = false;
                if (arr[i] <= target)
                    take = prev[target - arr[i]];
                curr[target] = take || notTake;
            }
            prev = curr;
        }

        return prev[k];
    }

    bool canPartition(vector<int>& nums) {
        int totsum = 0;
        for (int num : nums)
            totsum += num;

        if (totsum % 2 != 0)
            return false;

        int target = totsum / 2;
        return subsetSumToK(nums.size(), target, nums);
    }
};
