brute force= 
tc = O(n logn)
sc= O(n)
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> ans;
        int n= nums.size();
        for(int i=0;i<n;i++){
            nums[i]=nums[i]*nums[i];
            ans.push_back(nums[i]);
        }
      sort(ans.begin(),ans.end());//nlogn sort()
      return ans;
    }
};

optimized two pointer
tc=O(n)
sc= O(n)
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n);
        int left = 0, right = n - 1, pos = n - 1;

        while (left <= right) {
            if (abs(nums[left]) > abs(nums[right])) {
                ans[pos--] = nums[left] * nums[left];
                left++;
            } else {
                ans[pos--] = nums[right] * nums[right];
                right--;
            }
        }

        return ans;
    }
};
