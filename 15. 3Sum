Brute force 
timw limit exceeded
tc=O(n^3.log unique elements)
sc= 2 x O(no.  of triplets)


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
     
     set<vector<int>> st;
     for(int i=0;i<nums.size();i++){
        for(int j=i+1;j<nums.size();j++){
            for(int k=j+1;k<nums.size();k++){
                if (nums[i]+nums[j]+nums[k]==0){
                vector<int> temp = {nums[i],nums[j],nums[k]};
                sort(temp.begin(),temp.end());
                st.insert(temp);
                }
            }
        }
     }   
     vector<vector<int>> res(st.begin(),st.end());
     return res;
    }
};


better approach 
tc= O(n^2 log of size of size of set)
sc = O(n)+(O( no. of unique triplets)) x2

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
     
     set<vector<int>> st;
     for(int i=0;i<nums.size();i++){
        set<int> hashset;
        for(int j=i+1;j<nums.size();j++){
           int third = -(nums[i]+nums[j]); 
           if(hashset.find(third)!=hashset.end()){
            vector<int> temp={nums[i],nums[j],third};
            sort(temp.begin(),temp.end());
            st.insert(temp);
           }  
           hashset.insert(nums[j]);
        }
     }   
     vector<vector<int>> res(st.begin(),st.end());
     return res;
    }
};

optimal
tc= O(nlogn)+O(n^2)
sc=O(no. of unique triplets)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
     vector<vector<int>> ans;
     sort(nums.begin(),nums.end());
     for(int i = 0;i<nums.size(); i++){
        if(i>0 && nums[i] == nums[i-1]) continue;
        int j = i+1;
        int k = nums.size()-1;
        while(j<k){
            int sum = nums[i]+nums[j]+nums[k];
            if(sum<0){
                j++;
            }
            else if(sum > 0){
                k--;
            }
            else{
                vector<int> temp = {nums[i],nums[j],nums[k]};
                ans.push_back(temp);
                j++;
                k--;
                while(j < k && nums[j] == nums[j-1]) j++;
                while(j < k && nums[k] == nums[k+1]) k--;
            }
        }
     }
     return ans;
    }
};
