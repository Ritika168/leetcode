using lower and upper bound

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
     int n = nums.size();  
     int lb= lowerbound(nums,n,target);
     if(lb==n||nums[lb]!=target) return {-1,-1};
     return {lb, upperbound(nums,n,target)-1};
    }
    int upperbound(vector<int>& nums, int n, int target){
      int low=0, high=n-1;
      int ans = n;
      while(low<=high){
        int mid=(low+high)/2;
        if(nums[mid]>target){
            ans=mid;
            high=mid-1;
        }else{
            low=mid+1;
        }
      }
      return ans;
    }
    int lowerbound(vector<int>& nums, int n, int target){
      int low=0, high=n-1;
      int ans = n;
      while(low<=high){
        int mid=(low+high)/2;
        if(nums[mid]>=target){
            ans=mid;
            high=mid-1;
        }else{
            low=mid+1;
        }
      }
      return ans;
    }
};


without using lower and upper bound

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
     int n = nums.size();
     int first = firstOccurence(nums,n,target);
     if(first==-1) return {-1,-1};
     int last = lastOccurence(nums,n,target);
     return {first,last};   
    }
    int firstOccurence(vector<int>& nums, int n, int target){
        int low=0, high = n-1;
        int first = -1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                first=mid;
                high = mid-1;
            }
            else if(nums[mid]<target) low=mid+1;
            else high=mid-1;
        }
        return first;
    }
    int lastOccurence(vector<int>& nums, int n, int target){
        int low=0,high=n-1;
        int last = -1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                last=mid;
                low=mid+1;
            }
            else if(nums[mid]<target) low=mid+1;
            else high = mid-1;
        }
        return last;
    }
};
