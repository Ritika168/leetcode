class Solution {
public:
    int findMin(vector<int>& nums) {
        if (nums.empty()) return INT_MAX; // optional guard; LeetCode guarantees non-empty
        int low = 0, high = nums.size() - 1;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] < nums[high]) {
                // minimum is at mid or to the left
                high = mid;
            } else if (nums[mid] > nums[high]) {
                // minimum is to the right of mid
                low = mid + 1;
            } else {
                // nums[mid] == nums[high], cannot decide â€” safely shrink high
                high--;
            }
        }
        return nums[low];
    }
};
