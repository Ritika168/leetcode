class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
       int n=nums.size();
      vector<int> freq(n + 1, 0);

        // count frequencies
        for (int x : nums) freq[x]++;

        int repeating = -1, missing = -1;
        // IMPORTANT: check i from 1 through n (inclusive)
        for (int i = 1; i <= n; ++i) {
            if (freq[i] == 2) repeating = i;
            else if (freq[i] == 0) missing = i;
            if(repeating!=-1 && missing!=-1){
            break;
        }
       }
       return{repeating,missing};
    }
};


class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        long long n = nums.size();

        long long sumN = n * (n + 1LL) / 2;                  // expected sum of 1..n
        long long sumN2 = n * (n + 1LL) * (2LL * n + 1) / 6; // expected sum of squares of 1..n

        long long s = 0, s2 = 0;
        for (int x : nums) {
            s += x;
            s2 += 1LL * x * x;
        }

        long long val1 = s - sumN;   // X - Y
        long long val2 = s2 - sumN2; // X² - Y² = (X - Y)(X + Y)

        long long sumXY = val2 / val1; // X + Y

        long long X = (val1 + sumXY) / 2;
        long long Y = X - val1;

        return {(int)X, (int)Y};
    }
};
