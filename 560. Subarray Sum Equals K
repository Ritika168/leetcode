tc= O(n^2)

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
       int count = 0;
        int n = nums.size();

        for (int i = 0; i < n; i++) {
            int sum = 0;  
            for (int j = i; j < n; j++) { 
                sum += nums[j];  
                if (sum == k) {   
                    count++;
                }
            }
        }

        return count;
    }
};


optimal solution

tc = O(N) or O(NlogN) if we take ordered map
sc = O(N)

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
      unordered_map<int,int> mpp;
      mpp[0]=1;
      int preSum=0, cnt=0;
      for(int i=0; i<nums.size();i++){
        preSum+=nums[i];
        int remove = preSum-k;
        cnt+=mpp[remove];
        mpp[preSum]+=1;
      }
      return cnt;
    }
};
