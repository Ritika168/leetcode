class Solution {
public:
    int search(vector<int>& nums, int target) {
       int left=0,right=nums.size()-1;
       while(left<=right){
        int mid=left+(right-left)/2;
        if(nums[mid]==target)
        return mid;
        else if(nums[mid]<target)
        left=mid+1;
        else right=mid-1;
       } 
       return -1;
    }
};


recursive
class Solution {
public:
    int binSearch(vector<int>& nums, int target, int start, int end){
        if(start<=end){
            int mid = start+(end-start)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]<target)
               return binSearch(nums,target,mid+1,end);
            
            else 
                return binSearch(nums,target,start,mid-1);
            
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
      return binSearch(nums,target,0,nums.size()-1);
    }
};
