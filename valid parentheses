#include <iostream>
#include <stack>
#include <unordered_map>
using namespace std;

bool isValid(string s) {
    stack<char> st; 
    unordered_map<char, char> mapping = {{')', '('}, {'}', '{'}, {']', '['}}; 
    
    for (char c : s) {
        
        if (mapping.find(c) != mapping.end()) {
            char topElement = st.empty() ? '#' : st.top();
            st.pop();
            
            // If the top element doesn't match the correct opening bracket
            if (mapping[c] != topElement) {
                return false;
            }
        } else {
            // If it's an opening bracket, push it onto the stack
            st.push(c);
        }
    }
    
    return st.empty(); // If the stack is empty, the string is valid
}

int main() {
    string s;
    cout << "Enter a string of brackets: ";
    cin >> s;

    if (isValid(s)) {
        cout << "Valid string\n";
    } else {
        cout << "Invalid string\n";
    }

    return 0;
}
