class Solution {
public:
    set<vector<int>>s;

    void  getAllCominations(vector<int>& arr, int idx, int target, vector<vector<int>>&ans, vector<int>& combine){
        if(idx==arr.size() || target<0){
            return;
        }
        if(target==0){
            if(s.find(combine)==s.end()){
              ans.push_back({combine});
              s.insert(combine);   
            }
           
            return;
        }
        combine.push_back(arr[idx]);
        //single
        getAllCominations(arr,idx+1,target-arr[idx],ans,combine);
        //multiple
        getAllCominations(arr,idx,target-arr[idx],ans,combine);
        combine.pop_back();
        //exlusion
        getAllCominations(arr,idx+1,target,ans,combine);
    }
    vector<vector<int>> combinationSum(vector<int>& arr, int target) {
       vector<vector<int>>ans;
       vector<int> combine;
       getAllCominations(arr,0,target,ans,combine);
       return ans;   
    }
};
